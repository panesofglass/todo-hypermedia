/**
 * Find the element in the html (generated by linkify) based on its link relation and return the element
 * that contains the 'href' uri.
 *
 * TODO: opps, scope the HTMLElement rather than on document
 * TODO: there are bugs in this. It needs to be scoped to links and not items
 * TODO: [check: fixed] rel probably needs to be better scoped by regex too - there are false matches (eg search)
 *
 * @example
 *
 *  rel: create-form
 *
 *  <pre data-v-4a356f1e="">{
 *    <span class="key">"links":</span> [
 *        {
 *            <span class="key">"rel":</span> <span class="string">"create-form"</span>,
 *            <span class="key">"href":</span> <span class="string">"<a href="https://api.example.com/todo/form/create" class="linkified">https://api.example.com/todo/form/create</a>"</span>
 *        }
 *    ],
 *  </pre>
 *
 * @example
 *
 *  rel: edit-form (with patch)
 *
 *  <pre data-v-4a356f1e="">{
 *    <span class="key">"links":</span> [
 *        {
 *            <span class="key">"rel":</span> <span class="string">"edit-form"</span>,
 *            <span class="key">"href":</span> <span class="string">"<a href="https://api.example.com/todo/json-patch/create" class="linkified">https://api.example.com/todo/json-patch/create</a>"</span>
 *            <span class="key">"type":</span> <span class="string">"application/json-patch+json"</span>
 *        }
 *    ],
 *  </pre>
 * @param {string|RegExp} rel
 * @param {string} mediaType media type
 * @param {Element} el - parent scope to search
 * @returns {Element[]}
 */
export const findLinkRel = (rel, mediaType, el = document) => {

    // look for all elements of space and class string (these have the link rels)
    // <span class="string">"create-form"</span>,
    return [...el.querySelectorAll('span.string')]
    // make sure it is a 'rel' sibling (ie in the links section)
    // ie <span class="key">"rel":</span>
        .filter(div => div.previousElementSibling && div.previousElementSibling.innerHTML.includes('rel'))
        // look for the text inside for the value of the link rel
        // eg <span class="string">"create-form"</span>,
        .filter(div => {
            if (typeof rel === 'string') {
                return div.innerText.includes(rel);
            } else if (rel instanceof RegExp) {
                return rel.test(div.innerText);
            }
        })
        // filter on type (or absence of type)
        //   <span class="string">"application/json-patch+json"</span>
        .filter(div => (mediaType === null || mediaType === undefined)
            // no type needs to ensure that there is also no type on the screen as well
            ? findElWithTypeKey(div) == null || !findElWithTypeKey(div).innerHTML.includes('type')
            // if there is a type, match against the given one
            : findElWithMediaType(div).innerHTML.includes(mediaType)
        )
        // move forward two spans to find the Uri
        // <span class="string"><a href="https://api.example.com/todo/form/create" class="linkified">https://api.exa
        .map(div => findElWithHrefUri(div));
};

/**
 * Relative to the rel value (eg edit-form), find element of the type key element. Used to see
 * if the type is specified.
 *
 *    <span class="key">"rel":</span> <span class="string">"edit-form"</span>,  <-- start here
 *    <span class="key">"href":</span> <span class="string">"<a href="https://api.example.com/todo/json-patch/create" class="linkified">https://api.example.com/todo/json-patch/create</a>"</span>
 *    <span class="key">"type":</span> <span class="string">"application/json-patch+json"</span>
 *
 * @param {Element} el
 * @returns {Element | null}
 */
const findElWithTypeKey = el => el.nextElementSibling.nextElementSibling.nextElementSibling;

/**
 * Relative to the rel value (eg edit-form), find element of the media value element. Used to match
 * on the specified type.
 *
 *    <span class="key">"rel":</span> <span class="string">"edit-form"</span>,  <-- start here
 *    <span class="key">"href":</span> <span class="string">"<a href="https://api.example.com/todo/json-patch/create" class="linkified">https://api.example.com/todo/json-patch/create</a>"</span>
 *    <span class="key">"type":</span> <span class="string">"application/json-patch+json"</span>
 *
 *
 * @param {Element} el
 * @returns {Element | null}
 */
const findElWithMediaType = el => el.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling;

/**
 * Relative to the rel value (eg edit-form), find element of the href-key value element.
 *
 *    <span class="key">"rel":</span> <span class="string">"edit-form"</span>,  <-- start here
 *    <span class="key">"href":</span> <span class="string">"<a href="https://api.example.com/todo/json-patch/create" class="linkified">https://api.example.com/todo/json-patch/create</a>"</span>
 *    <span class="key">"type":</span> <span class="string">"application/json-patch+json"</span>
 *
 *
 * @param {Element} el
 * @returns {Element | null}
 */
const findElWithHrefUri = el => el.nextElementSibling.nextElementSibling;
