<?xml version="1.0" encoding="utf-8"?>
<nlog
        xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"

        autoReload="true"
        internalLogLevel="Warn"
        internalLogFile="api-nlog-internal.log">


    <!-- 
         Currently, development logging on targets windows and mac programming environments
         
         Set the file directory creation:
           - $TMPDIR (MacOS) 
           - $TMP (Linux, some windows) 
           - %APPDATA%/todo (win10)
         
         -->
    <variable name="path"
              value="${environment:variable=TMPDIR:whenEmpty=${environment:variable=TMP}:whenEmpty=${specialfolder:folder=ApplicationData:dir=todo}}"/>


    <!-- enable asp.net core layout renderers -->
    <extensions>
        <add assembly="NLog.Web.AspNetCore"/>
    </extensions>

    <targets>

        <!--
        A console logger
    -->
        <target
                name="TheConsole"
                xsi:type="Console"
                layout="${level:uppercase=true} ${logger:shortname=true}: ${message}"/>


        <!-- 
      Output to the developer IDE debug window (if running under a debugger)
      see https://github.com/NLog/NLog/wiki/Debugger-target 
    -->
        <target
                name="Debugger"
                xsi:type="Debugger"
                layout="${level:uppercase=true} ${logger:shortname=true}: ${message}"/>

        <!-- 
    
      Create a simple log file for developers that is overwritten 
      each time the application starts. This log file should be 'human' readable
      without debug information or stack traces. It is intended for locating
      issues, whereas the debug log will include large volumes of detailed information.
      
      see https://github.com/NLog/NLog/wiki/File-target 
    -->
        <target
                name="DeveloperErrorLogFile"
                xsi:type="File"
                layout="${longdate} ${level:uppercase=true} ${logger:shortname=true}: ${message}"
                fileName="${var:path}/todo-api-error.log"
                deleteOldFileOnStartup="true"/>


        <!-- 
    
      Create a simple log file for developers that is overwritten 
      each time the application starts. This log file should be 'human' readable
      without debug information or stack traces. It is intended for locating
      issues, whereas the debug log will include large volumes of detailed information.
      
      see https://github.com/NLog/NLog/wiki/File-target 
    -->
        <target name="AsyncDeveloperLogFile" xsi:type="AsyncWrapper">
            <target
                    name="DeveloperLogFile"
                    xsi:type="File"
                    layout="${longdate} ${level:uppercase=true} ${logger:shortname=true}: ${message}"
                    fileName="${var:path}/todo-api.log"
                    deleteOldFileOnStartup="true"
                    optimizeBufferReuse="true"/>
        </target>


        <!-- 
    
      Create a simple log file developers that is overwritten 
      each time the application starts. This log file includes debug information
      and stack traces.
      
      see https://github.com/NLog/NLog/wiki/File-target 
    -->
        <target name="AsyncDeveloperDebugLogFile" xsi:type="AsyncWrapper">
            <target
                    name="DeveloperDebugLogFile"
                    xsi:type="File"
                    layout="${longdate} ${level:uppercase=true} ${logger}: ${message}${onexception:inner=${newline}  ${exception:format=Message,ToString}}"
                    fileName="${var:path}/todo-api-debug.log"
                    deleteOldFileOnStartup="true"
                    optimizeBufferReuse="true"/>
        </target>

    </targets>

    <rules>
        <logger name="*" minlevel="Trace" writeTo="TheConsole">
            <filters>
                <when
                        condition="equals('Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationMiddleware', '${logger}') and level &lt;= LogLevel.Info"
                        action="Ignore"/>
                <when
                        condition="equals('Microsoft.AspNetCore.Authorization.DefaultAuthorizationService', '${logger}') and level &lt;= LogLevel.Info"
                        action="Ignore"/>
                <when
                        condition="equals('Microsoft.AspNetCore.Hosting.Internal.WebHost', '${logger}') and level &lt;= LogLevel.Info"
                        action="Ignore"/>
                <when
                        condition="equals('Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker', '${logger}') and level &lt;= LogLevel.Info"
                        action="Ignore"/>
                <when
                        condition="equals('Microsoft.AspNetCore.Mvc.Internal.ObjectResultExecutor', '${logger}') and level &lt;= LogLevel.Info"
                        action="Ignore"/>
                <when
                        condition="equals('Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.ViewResultExecutor', '${logger}') and level &lt;= LogLevel.Info"
                        action="Ignore"/>
                <when
                        condition="equals('Microsoft.AspNetCore.Mvc.ChallengeResult', '${logger}') and level &lt;= LogLevel.Info"
                        action="Ignore"/>
                <when
                        condition="equals('Microsoft.AspNetCore.Mvc.Internal.RedirectResultExecutor', '${logger}') and level &lt;= LogLevel.Info"
                        action="Ignore"/>
                <when
                        condition="equals('Marvin.Cache.Headers.HttpCacheHeadersMiddleware', '${logger}') and level &lt;= LogLevel.Info"
                        action="Ignore"/>
            </filters>
        </logger>
        <logger name="*" minlevel="Info" writeTo="Debugger"/>
        <logger name="*" minlevel="Warn" writeTo="DeveloperErrorLogFile"/>
        <logger name="*" minlevel="Info" writeTo="AsyncDeveloperLogFile">
            <filters>
                <when
                        condition="equals('Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationMiddleware', '${logger}') and level &lt;= LogLevel.Info"
                        action="Ignore"/>
                <when
                        condition="equals('Microsoft.AspNetCore.Authorization.DefaultAuthorizationService', '${logger}') and level &lt;= LogLevel.Info"
                        action="Ignore"/>
                <when
                        condition="equals('Microsoft.AspNetCore.Hosting.Internal.WebHost', '${logger}') and level &lt;= LogLevel.Info"
                        action="Ignore"/>
                <when
                        condition="equals('Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker', '${logger}') and level &lt;= LogLevel.Info"
                        action="Ignore"/>
                <when
                        condition="equals('Microsoft.AspNetCore.Mvc.Internal.ObjectResultExecutor', '${logger}') and level &lt;= LogLevel.Info"
                        action="Ignore"/>
                <when
                        condition="equals('Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.ViewResultExecutor', '${logger}') and level &lt;= LogLevel.Info"
                        action="Ignore"/>
                <when
                        condition="equals('Microsoft.AspNetCore.Mvc.ChallengeResult', '${logger}') and level &lt;= LogLevel.Info"
                        action="Ignore"/>
                <when
                        condition="equals('Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerMiddleware', '${logger}') and level &lt;= LogLevel.Info"
                        action="Ignore"/>
                <when
                        condition="equals('Microsoft.AspNetCore.Mvc.Internal.RedirectResultExecutor', '${logger}') and level &lt;= LogLevel.Info"
                        action="Ignore"/>
                <when
                        condition="equals('Marvin.Cache.Headers.HttpCacheHeadersMiddleware', '${logger}') and level &lt;= LogLevel.Info"
                        action="Ignore"/>           
            </filters>
        </logger>
        <logger name="*" minlevel="Trace" writeTo="AsyncDeveloperDebugLogFile"/>
    </rules>
</nlog>