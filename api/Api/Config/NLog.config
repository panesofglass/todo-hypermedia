<?xml version="1.0" encoding="utf-8"?>
<nlog
    xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"

    autoReload="true"
    internalLogLevel="Warn"
    internalLogFile="api-nlog-internal.log">

    <!-- enable asp.net core layout renderers -->
    <extensions>
        <add assembly="NLog.Web.AspNetCore"/>
    </extensions>

    <targets>

        <!--
        A console logger
    -->
        <target
            name="TheConsole"
            xsi:type="ColoredConsole"
            layout="${level:uppercase=true} ${logger:shortname=true}[${mdlc:item=id}]: ${message}" />


        <!-- 
      Output to the developer IDE debug window (if running under a debugger)
      see https://github.com/NLog/NLog/wiki/Debugger-target 
    -->
        <target
            name="Debugger"
            xsi:type="Debugger"
            layout="${level:uppercase=true} ${logger:shortname=true}[${mdlc:item=id}]: ${message}" />

        <!-- 
    
      Create a simple log file in %TEMP% for developers that is overwritten 
      each time the application starts. This log file should be 'human' readable
      without debug information or stack traces. It is intended for locating
      issues, whereas the debug log will include large volumes of detailed information.
      
      see https://github.com/NLog/NLog/wiki/File-target 
    -->
        <target
            name="DeveloperErrorLogFile"
            xsi:type="File"
            layout="${longdate} ${level:uppercase=true} ${logger:shortname=true}[${mdlc:item=id}]: ${message}"
            fileName="${environment:variable=TEMP:whenEmpty=${environment:variable=TMP:whenEmpty=${environment:variable=TMPDIR}}/logs/api-error.log"
            deleteOldFileOnStartup="true" />


        <!-- 
    
      Create a simple log file in %TEMP% for developers that is overwritten 
      each time the application starts. This log file should be 'human' readable
      without debug information or stack traces. It is intended for locating
      issues, whereas the debug log will include large volumes of detailed information.
      
      see https://github.com/NLog/NLog/wiki/File-target 
    -->
        <target name="AsyncDeveloperLogFile" xsi:type="AsyncWrapper">
            <target
                name="DeveloperLogFile"
                xsi:type="File"
                layout="${longdate} ${level:uppercase=true} ${logger:shortname=true}[${mdlc:item=id}]: ${message}"
                fileName="${environment:variable=TEMP:whenEmpty=${environment:variable=TMP:whenEmpty=${environment:variable=TMPDIR}}/logs/api.log"
                deleteOldFileOnStartup="true"
                optimizeBufferReuse="true" />
        </target>


        <!-- 
    
      Create a simple log file in %TEMP% for developers that is overwritten 
      each time the application starts. This log file includes debug information
      and stack traces.
      
      see https://github.com/NLog/NLog/wiki/File-target 
    -->
        <target name="AsyncDeveloperDebugLogFile" xsi:type="AsyncWrapper">
            <target
                name="DeveloperDebugLogFile"
                xsi:type="File"
                layout="${longdate} ${level:uppercase=true} ${logger}[${mdlc:item=id}]: ${message}${onexception:inner=${newline}  ${exception:format=Message,ToString}}"
                fileName="${environment:variable=TEMP:whenEmpty=${environment:variable=TMP:whenEmpty=${environment:variable=TMPDIR}}/logs/api-debug.log"
                deleteOldFileOnStartup="true"
                optimizeBufferReuse="true" />
        </target>

    </targets>

    <rules>
        <logger name="*" minlevel="Info" writeTo="TheConsole">
            <filters>
                <when
                    condition="equals('Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationMiddleware', '${logger}') and level &lt;= LogLevel.Info"
                    action="Ignore" />
                <when
                    condition="equals('Microsoft.AspNetCore.Authorization.DefaultAuthorizationService', '${logger}') and level &lt;= LogLevel.Info"
                    action="Ignore" />
                <when
                    condition="equals('Microsoft.AspNetCore.Hosting.Internal.WebHost', '${logger}') and level &lt;= LogLevel.Info"
                    action="Ignore" />
                <when
                    condition="equals('Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker', '${logger}') and level &lt;= LogLevel.Info"
                    action="Ignore" />
                <when
                    condition="equals('Microsoft.AspNetCore.Mvc.Internal.ObjectResultExecutor', '${logger}') and level &lt;= LogLevel.Info"
                    action="Ignore" />
                <when
                    condition="equals('Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.ViewResultExecutor', '${logger}') and level &lt;= LogLevel.Info"
                    action="Ignore" />
                <when
                    condition="equals('Microsoft.AspNetCore.Mvc.ChallengeResult', '${logger}') and level &lt;= LogLevel.Info"
                    action="Ignore" />
                 <when
                    condition="equals('Microsoft.AspNetCore.Mvc.Internal.RedirectResultExecutor', '${logger}') and level &lt;= LogLevel.Info"
                    action="Ignore" />
            </filters>
        </logger>
        <logger name="*" minlevel="Info" writeTo="Debugger" />
        <logger name="*" minlevel="Warn" writeTo="DeveloperErrorLogFile" />
        <logger name="*" minlevel="Info" writeTo="AsyncDeveloperLogFile">
            <filters>
                <when
                    condition="equals('Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationMiddleware', '${logger}') and level &lt;= LogLevel.Info"
                    action="Ignore" />
                <when
                    condition="equals('Microsoft.AspNetCore.Authorization.DefaultAuthorizationService', '${logger}') and level &lt;= LogLevel.Info"
                    action="Ignore" />
                <when
                    condition="equals('Microsoft.AspNetCore.Hosting.Internal.WebHost', '${logger}') and level &lt;= LogLevel.Info"
                    action="Ignore" />
                <when
                    condition="equals('Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker', '${logger}') and level &lt;= LogLevel.Info"
                    action="Ignore" />
                <when
                    condition="equals('Microsoft.AspNetCore.Mvc.Internal.ObjectResultExecutor', '${logger}') and level &lt;= LogLevel.Info"
                    action="Ignore" />
                <when
                    condition="equals('Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.ViewResultExecutor', '${logger}') and level &lt;= LogLevel.Info"
                    action="Ignore" />
                <when
                    condition="equals('Microsoft.AspNetCore.Mvc.ChallengeResult', '${logger}') and level &lt;= LogLevel.Info"
                    action="Ignore" />
                <when
                    condition="equals('Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerMiddleware', '${logger}') and level &lt;= LogLevel.Info"
                    action="Ignore" />
                <when
                    condition="equals('Microsoft.AspNetCore.Mvc.Internal.RedirectResultExecutor', '${logger}') and level &lt;= LogLevel.Info"
                    action="Ignore" />
            </filters>
        </logger>
        <logger name="*" minlevel="Trace" writeTo="AsyncDeveloperDebugLogFile" />
    </rules>
</nlog>